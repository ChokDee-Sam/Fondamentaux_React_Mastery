(this["webpackJsonp@mikecodeur/react-fondamentaux"]=this["webpackJsonp@mikecodeur/react-fondamentaux"]||[]).push([[36],{238:function(e,t,n){"use strict";n.r(t),t.default="\x3c!-- Manipuler le DOM avec React --\x3e\n\x3c!-- http://localhost:3000/alone/exercise/02.html --\x3e\n\n<html>\n  <head>\n    <script src=\"https://unpkg.com/react@17.0.2/umd/react.development.js\"><\/script>\n    <script src=\"https://unpkg.com/react-dom@17.0.2/umd/react-dom.development.js\"><\/script>\n    \x3c!-- \u26cf\ufe0f Ajoute Babel en supprimant les commentaires de la ligne ci-dessous --\x3e\n    \x3c!-- <script src=\"https://unpkg.com/@babel/standalone@7.15.1/babel.js\"><\/script> --\x3e\n  </head>\n  <body>\n    <div id=\"root\"></div>\n    \x3c!-- \ud83d\udc36 Pour que Babel prenne en compte le code JavaScipt, il faut rajouter un attribut `type=\"text/babel\"`\n    A la balise <script> --\x3e\n    <script>\n      const rootEl = document.getElementById('root')\n\n      // \ud83d\udc36 Il va falloir maintenant r\xe9impl\xe9menter avec JSX\n      const divEl = document.createElement('div')\n      divEl.textContent = 'Bienvenue sur mon site'\n      divEl.className = 'rootContainer'\n\n      // \ud83d\udc36 Cr\xe9e une variable divEl qui contient du JSX (une div avec un texte et une class comme\n      // le resultat final html attendu)\n      // \ud83e\udd16 Attention aux attributs en React qui diff\xe8rent l\xe9g\xe8rement du HTML ex : class -> className\n      // \ud83d\udcd1 https://fr.reactjs.org/docs/dom-elements.html\n\n      document.getElementById('root').append(divEl)\n    <\/script>\n  </body>\n</html>\n"}}]);
//# sourceMappingURL=36.4db9a6ed.chunk.js.map